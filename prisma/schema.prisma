// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  walletAddress String   @unique
  userType      UserType @default(EMPLOYEE)
  hasOnboarded  Boolean  @default(false)

  publicKeyX      String? // publicKey[0] (for employees)
  publicKeyY      String? // publicKey[1] (for employees)
  preferedChainId Int? // preferedChainId (for employees)
  preferedToken   String? // preferedToken (for employees)

  organisations Organisation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Organisation {
  id              String     @id @default(cuid())
  name            String? // Optional since contract doesn't store name
  orgID           BigInt     @unique // Organisation ID from contract
  contractAddress String     @unique // Address of the deployed Organisation contract
  owner           User       @relation(fields: [ownerId], references: [id])
  ownerId         String
  isActive        Boolean    @default(true)
  employees       Employee[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("organisations")
}

model Employee {
  id              String       @id @default(cuid())
  organisation    Organisation @relation(fields: [organisationId], references: [id])
  organisationId  String
  employeeId      BigInt // Employee ID from contract (nextEmployeeId)
  employeeAddress String
  name            String? // Optional employee name/identifier

  // Stealth address keys (stored as strings to handle BigInt)
  publicViewerKeyX  String // publicViewerKey[0]
  publicViewerKeyY  String // publicViewerKey[1]  
  publicSpenderKeyX String // publicSpenderKey[0]
  publicSpenderKeyY String // publicSpenderKey[1]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organisationId, employeeAddress])
  @@unique([organisationId, employeeId])
  @@map("employees")
}

enum UserType {
  EMPLOYER
  EMPLOYEE
}
